// When color definition differs for dark and light variant,
// it gets @if-ed depending on $variant

@import '_palette.scss';

$is_highcontrast:false !default; // Yaru: already defined in gnome-shell.scss.in

// base color for dark theme
$_dark_base_color: lighten($jet, 4%);

$bg_color_dark: lighten($jet, 2%);
$bg_color: if($variant=='light', #FAFAFA, $bg_color_dark);
$fg_color_dark: $porcelain;

$base_color: if($variant =='light', #ffffff, $_dark_base_color);
$fg_color: if($variant=='light', $inkstone, $fg_color_dark);
$text_color: $fg_color;

$selected_fg_color: $accent_fg_color;
$selected_bg_color: $accent_bg_color;
$selected_borders_color: if($variant=='light', darken($selected_bg_color, 15%), darken($selected_bg_color, 30%));

$yaru_borders_color_dark: lighten(desaturate(lighten($jet, 4%), 100%), 14%); // Yaru: used for dash and other dark elements on light theme
$borders_color: if($variant=='light', darken($bg_color, 20%), $yaru_borders_color_dark);
$alt_borders_color: if($variant=='light', darken($bg_color, 24%), darken($bg_color, 10%));
$outer_borders_color: transparentize($fg_color, 0.85);

$link_color: if($variant == 'light', darken($selected_bg_color, 10%), lighten($selected_bg_color, 20%));
$link_visited_color: if($variant == 'light', darken($selected_bg_color, 20%), lighten($selected_bg_color, 10%));

$warning_color: $yellow;
$error_color: $red;
$success_color: lighten($green, 5%);
$destructive_color: if($variant=='light', $red, darken($red, 10%));

// color definitions for OSD elements
$osd_fg_color: #eeeeec;
$osd_bg_color: transparentize(lighten($jet, 2%), 0.025);

// derived osd colors
$osd_insensitive_bg_color: transparentize(mix($osd_fg_color, opacify($osd_bg_color, 1), 10%), 0.5);
$osd_insensitive_fg_color: mix($osd_fg_color, opacify($osd_bg_color, 1), 50%);
$osd_borders_color: transparentize(black, 0.3);
$osd_outer_borders_color: transparentize(white, 0.84);

$shadow_color: transparentize(black, 0.9);

// buttons
$button_mix_factor: if($variant == 'light', 12%, 9%);

// notifications
$bubble_buttons_color: if($variant == 'light', darken($bg_color, 7%), lighten($bg_color, 5%));

// color definitions for system elements (e.g. the overview)
$system_base_color: $_dark_base_color; // always dark
$system_fg_color: darken($porcelain, 2%);

// derived system colors
$system_bg_color: lighten($jet, 4%); // Lighten than dash but darken than bg-color
// $system_borders_color: transparentize($system_fg_color, .9);
$system_borders_color: $yaru_borders_color_dark; // Yaru: use our definition
$system_insensitive_fg_color: mix($system_fg_color, $system_bg_color, 50%);
$system_overlay_bg_color: mix($system_base_color, $system_fg_color, 90%); // for non-transparent items, e.g. dash

// derived global colors
// insensitive state
$insensitive_fg_color: if($variant == 'light', mix($fg_color, $bg_color, 60%),  mix($fg_color, $bg_color, 50%));
$insensitive_bg_color: mix($bg_color, $base_color, 60%);
$insensitive_borders_color: mix($borders_color, $base_color, 60%);

// checked state
$checked_bg_color: if($variant=='light', darken($bg_color, 7%), lighten($bg_color, 9%));
$checked_fg_color: if($variant=='light', darken($fg_color, 7%), lighten($fg_color, 9%));

// hover state
// Yaru: we want the hover bg to be a visible gray for dark and light shell themes
$hover_bg_color: transparentize($fg_color, 0.9);
$hover_fg_color: $fg_color;
$hover_borders_color: lighten($borders_color, 5%);

// active state
$active_bg_color: transparentize($fg_color, 0.8);
$active_fg_color: darken($fg_color, if($variant=='light', 5%, 3%));

@import '_yaru-colors.scss';
